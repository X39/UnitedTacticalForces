//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace X39.UnitedTacticalForces.Api.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Language {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Language() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("X39.UnitedTacticalForces.Api.Properties.Language", typeof(Language).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IP Address.
        /// </summary>
        internal static string DiscordCommand_TeamSpeak_IpAddress {
            get {
                return ResourceManager.GetString("DiscordCommand_TeamSpeak_IpAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Join.
        /// </summary>
        internal static string DiscordCommand_TeamSpeak_JoinButton {
            get {
                return ResourceManager.GetString("DiscordCommand_TeamSpeak_JoinButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No TeamSpeak has been set up..
        /// </summary>
        internal static string DiscordCommand_TeamSpeak_NotConfigured {
            get {
                return ResourceManager.GetString("DiscordCommand_TeamSpeak_NotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password.
        /// </summary>
        internal static string DiscordCommand_TeamSpeak_Password {
            get {
                return ResourceManager.GetString("DiscordCommand_TeamSpeak_Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port.
        /// </summary>
        internal static string DiscordCommand_TeamSpeak_Port {
            get {
                return ResourceManager.GetString("DiscordCommand_TeamSpeak_Port", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string ServerController_Arma3_BasicCfg_GeneralGroup {
            get {
                return ResourceManager.GetString("ServerController_Arma3_BasicCfg_GeneralGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The folder in which the missions are to be stored..
        /// </summary>
        internal static string ServerController_Arma3_GameFolders_MPMissions_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_GameFolders_MPMissions_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missions.
        /// </summary>
        internal static string ServerController_Arma3_GameFolders_MPMissions_Name {
            get {
                return ResourceManager.GetString("ServerController_Arma3_GameFolders_MPMissions_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host.
        /// </summary>
        internal static string ServerController_Arma3_Host {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected game branch.
        /// </summary>
        internal static string ServerController_Arma3_Host_Branch_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Branch_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branch.
        /// </summary>
        internal static string ServerController_Arma3_Host_Branch_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Branch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ip address to connect the headless client to..
        /// </summary>
        internal static string ServerController_Arma3_Host_HeadlessClientIp_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_HeadlessClientIp_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless Client IP.
        /// </summary>
        internal static string ServerController_Arma3_Host_HeadlessClientIp_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_HeadlessClientIp_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The password of the server to connect the client to..
        /// </summary>
        internal static string ServerController_Arma3_Host_HeadlessClientPassword_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_HeadlessClientPassword_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless Client password.
        /// </summary>
        internal static string ServerController_Arma3_Host_HeadlessClientPassword_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_HeadlessClientPassword_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loads the specified subfolders for different mods. Separated by semicolons. Absolute path and multiple stacked folders are possible.
        ///In Linux, arguments for multiple folders require the following separation syntax: mod1\;mod2\;modn.
        ///The &quot;relative path&quot; starts with the directory from which the Arma 3 executable was launched, and is not always the same as where the executable is located, as in betas.
        ///Usually this is the same as the installation path and the same as the one entered in the Windows registry.  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerController_Arma3_Host_Mod_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Mod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mods.
        /// </summary>
        internal static string ServerController_Arma3_Host_Mod_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Mod_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port on which the dedicated server should listen..
        /// </summary>
        internal static string ServerController_Arma3_Host_Port_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Port_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port.
        /// </summary>
        internal static string ServerController_Arma3_Host_Port_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Port_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loads the specified subfolders for various server-side (not transferred to clients) mods. Separated by semicolons. Absolute path and multiple stacked folders are possible.
        ///In Linux, arguments for multiple folders require the following separator syntax: -mod=mod1\;mod2\;mod3..
        /// </summary>
        internal static string ServerController_Arma3_Host_ServerMod_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_ServerMod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server mods.
        /// </summary>
        internal static string ServerController_Arma3_Host_ServerMod_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_ServerMod_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of player uids (SteamID64) that are able to #login without providing a password. Format: {&quot;1234567890&quot;, &quot;2345678901&quot;}.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Admins_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Admins_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admins.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Admins_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Admins_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set to , the mission is loaded regardless of the number of load errors. If not set, the server will abort loading the mission and return to the mission selection..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsIgnoreMissionLoadErrors_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsIgnoreMissionLoadErrors_Descripti" +
                        "on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore errors when loading missions.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsIgnoreMissionLoadErrors_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsIgnoreMissionLoadErrors_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, &quot;Server: Object not found&quot; messages are logged.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsLogObjectNotFound_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsLogObjectNotFound_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log object not found.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsLogObjectNotFound_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsLogObjectNotFound_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If #monitor is running and the size of a player&apos;s guaranteed message queue (listed as G: in #monitor) exceeds the threshold, all message types and sizes of that player are written to a log file in the RPT directory (see Crash Files); the writing itself is logged server-side..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsQueueSizeLogG_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsQueueSizeLogG_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log large queue sizes.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsQueueSizeLogG_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsQueueSizeLogG_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set to skip parsing description.ext/mission.sqm. Shows the pbo filename instead of the configured mission name. OverviewText and similar will not work, but loading the mission list is much faster when there are many missions.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsSkipDescriptionParsing_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsSkipDescriptionParsing_Descriptio" +
                        "n", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip parsing description.ext.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AdvancedOptionsSkipDescriptionParsing_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AdvancedOptionsSkipDescriptionParsing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent or allow file changes at runtime for the clients (including HC)..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File patching.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled for both headless clients and normal clients.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value0_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value0_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value0_Name {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value0_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allowed for headless client, disabled for normal clients.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value1_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value1_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HC Only.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value1_Name {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value1_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allowed for both headless clients and normal clients.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value2_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value2_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedFilePatching_Value2_Name {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedFilePatching_Value2_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedHTMLLoadExtensionsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedHTMLLoadExtensionsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedHTMLLoadExtensionsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedHTMLLoadExtensionsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedHTMLLoadURIsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedHTMLLoadURIsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedHTMLLoadURIsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedHTMLLoadURIsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedLoadFileExtensionsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedLoadFileExtensionsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedLoadFileExtensionsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedLoadFileExtensionsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedPreprocessFileExtensionsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedPreprocessFileExtensionsArray_Description" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedPreprocessFileExtensionsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedPreprocessFileExtensionsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to allowedVoteCmds[] = {{&lt;commandName&gt;, &lt;preMissionStart&gt;, &lt;postMissionStart&gt;, &lt;votingThreshold&gt;}, ...};, where:
        ///&lt;commandName&gt;: string - name of the command, for example &quot;admin&quot;.
        ///&lt;preMissionStart&gt; (Optional): Boolean value - true to allow the command before the mission start. Default: true
        ///&lt;postMissionStart&gt; (Optional): Boolean value - true to allow the command after the mission start. Default: true
        ///&lt;votingThreshold&gt; (Optional): Number - voting threshold 0...1. Default: value assigned to voteThreshold para [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedVoteCmdsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedVoteCmdsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allowed #vote commands.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedVoteCmdsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedVoteCmdsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to allowedVoteAdminCmds[] = {{&lt;commandName&gt;, &lt;preMissionStart&gt;}, ...};, where:
        ///&lt;commandName&gt;: string - name of the command, for example &quot;admin&quot;.
        ///&lt;preMissionStart&gt; (Optional): Boolean value - true to allow the command before the mission start. Default: true
        ///&lt;postMissionStart&gt; (Optional): Boolean value - true to allow the command after the mission start. Default: true
        ///If no command is specified ( allowedVotedAdminCmds[] = {}; ), it means that such commands are disabled for the selected administrator.
        ///No spe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedVotedAdminCmdsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedVotedAdminCmdsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allowed commands for voted administrator.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AllowedVotedAdminCmdsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AllowedVotedAdminCmdsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AutoSelectMission_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AutoSelectMission_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_AutoSelectMission_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_AutoSelectMission_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the BattlEye anti-cheat engine. Requires BattlEye to be installed on the server and clients joining the server..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BattlEye_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BattlEye_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BattlEye.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BattlEye_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BattlEye_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BriefingTimeOut_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BriefingTimeOut_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BriefingTimeOut_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BriefingTimeOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BriefingTimeOutArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BriefingTimeOutArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_BriefingTimeOutArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_BriefingTimeOutArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_CallExtReportLimit_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_CallExtReportLimit_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_CallExtReportLimit_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_CallExtReportLimit_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DebriefingTimeOut_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DebriefingTimeOut_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DebriefingTimeOut_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DebriefingTimeOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DebriefingTimeOutArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DebriefingTimeOutArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DebriefingTimeOutArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DebriefingTimeOutArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisableChannelsArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisableChannelsArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisableChannelsArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisableChannelsArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activates or deactivates voice chat (VON).
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisableVoN_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisableVoN_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable voice chat.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisableVoN_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisableVoN_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisconnectTimeout_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisconnectTimeout_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_DisconnectTimeout_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_DisconnectTimeout_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_EnablePlayerDiag_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_EnablePlayerDiag_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_EnablePlayerDiag_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_EnablePlayerDiag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of player Uids (SteamId64) that are allowed to ignore the rules of allowedFilePatching and verifySignatures so they can join the server with any mods of their choice.
        ///Signature errors are still logged by the server on connection and can kick the user if the error occurs before the server knows the client&apos;s SteamID, e.g. if they try to join with completely unsigned pbo&apos;s..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_FilePatchingExceptions_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_FilePatchingExceptions_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File patching exceptions.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_FilePatchingExceptions_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_FilePatchingExceptions_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_GeneralGroup {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_GeneralGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless Client IPs. Im Falle mehrerer Headless Clients sind mehrere Verbindungen und Adressen zulässig..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_HeadlessClients_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_HeadlessClients_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless client IPs.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_HeadlessClients_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_HeadlessClients_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server name visible in the game browser..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Hostname_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Hostname_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Servername.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Hostname_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Hostname_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_KickClientsOnSlowNetworkArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_KickClientsOnSlowNetworkArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_KickClientsOnSlowNetworkArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_KickClientsOnSlowNetworkArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this option is enabled, duplicate player IDs will not be allowed. The second player with an existing ID will be kicked automatically..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Kickduplicate_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Kickduplicate_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kick duplicate players.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Kickduplicate_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Kickduplicate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_KickTimeoutArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_KickTimeoutArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_KickTimeoutArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_KickTimeoutArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LobbyIdleTimeout_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LobbyIdleTimeout_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LobbyIdleTimeout_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LobbyIdleTimeout_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declares clients with unlimited bandwidth and almost no latency..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LocalClient_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LocalClient_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local client IPs.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LocalClient_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LocalClient_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When this option is enabled, the server is set to LAN mode. This allows multiple local instances of the game to connect to the server for testing purposes. At the same time, all non-local instances are prevented from connecting..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Loopback_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Loopback_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LAN mode.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Loopback_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Loopback_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bandwidth that is guaranteed never to be available to the server (in bps). This value helps the server estimate the available bandwidth..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxBandwidth_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxBandwidth_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum bandwidth.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxBandwidth_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxBandwidth_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Users with a custom face or custom tone larger than this size will be rejected when attempting to connect..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxCustomFileSize_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxCustomFileSize_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum custom file size.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxCustomFileSize_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxCustomFileSize_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxdesync_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxdesync_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxdesync_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxdesync_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of packets (grouped messages) that can be sent in one simulation cycle (&quot;frame&quot;). Increasing this value can reduce the delay on servers with high upload bandwidth..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxMsgSend_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxMsgSend_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum messages per frame.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxMsgSend_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxMsgSend_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxpacketloss_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxpacketloss_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxpacketloss_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxpacketloss_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxping_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxping_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Maxping_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Maxping_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of players that can connect to the server. The final number is the smaller value between the number given here and the number of mission slots..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxPlayers_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxPlayers_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum players.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxPlayers_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxPlayers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum size (payload) of the guaranteed packet in bytes (without header). Small messages are packed into larger packets (aggregate messages). Guaranteed packets (aggregate messages) are used for non-recurring events like firing..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxSizeGuaranteed_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxSizeGuaranteed_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum TCP package size.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxSizeGuaranteed_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxSizeGuaranteed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum size (payload) of the non-guaranteed packet in bytes (without header). Small messages are packed into larger packets (aggregate messages). Non-guaranteed packets (aggregate messages) are used for repetitive updates such as the position of soldiers or vehicles. Increasing this value can improve the bandwidth requirement, but may increase the delay..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxSizeNonguaranteed_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxSizeNonguaranteed_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum UDP package size.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxSizeNonguaranteed_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxSizeNonguaranteed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bandwidth guaranteed to the server (in bps). This value helps the server estimate the available bandwidth. An overly optimistic value can increase delay and CPU load because too many messages are sent but discarded..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinBandwidth_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinBandwidth_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected minimal bandwidth.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinBandwidth_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinBandwidth_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimal bug when sending updates over the network. Using a smaller value can cause units observed with binoculars or sniper rifles to move more smoothly, but this comes with increased network traffic.
        ///Example: A unit 1 km (distance d = 1 km) from the player with MinErrorToSend = 0.001 (METS = 0.001) would send an update if that unit moved 50 m (error value E = 50).
        ///Formula: d = sqrt[(20E)/METS] ; 1000 = sqrt[(20E)/0.001] -&gt; E = 50
        ///In reality, other factors of the object are also considered according to a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinErrorToSend_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinErrorToSend_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minmal error to send.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinErrorToSend_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinErrorToSend_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimal error when sending updates over the network for nearby units. Using a larger value may reduce traffic for nearby units. Also used to control traffic between client and server.
        ///Using MinErrorToSend alone, for small distance values (d), the frequency of high errors (E) would result in excessive network messages that are not necessary but could negatively affect FPS.
        ///Too large a value for METSN may prevent desirable network update messages from being sent in a timely manner, causing units to appear t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinErrorToSendNear_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinErrorToSendNear_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimal error to send near.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MinErrorToSendNear_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MinErrorToSendNear_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MissionsToServerRestart_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MissionsToServerRestart_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MissionsToServerRestart_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MissionsToServerRestart_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MissionsToShutdown_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MissionsToShutdown_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MissionsToShutdown_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MissionsToShutdown_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message displayed when connecting to the server..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Motd_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Motd_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Motd.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Motd_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Motd_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other options.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_OtherOptions {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_OtherOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for the connection to the server..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Password_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Password_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Password_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Password_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password to protect admin access via &quot;#login &lt;PASSWORD&gt;&quot;..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_PasswordAdmin_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_PasswordAdmin_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admin password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_PasswordAdmin_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_PasswordAdmin_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mission continues when all clients disconnect. If you enable the Persistence option, missions with base or instant respawn continue to run after all players disconnect. The other respawn types do not make a mission persistent. The type of respawn that a particular mission uses is specified in its Description.ext..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Persistent_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Persistent_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Persistent Mission.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Persistent_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Persistent_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RandomMissionOrder_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RandomMissionOrder_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RandomMissionOrder_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RandomMissionOrder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RoleTimeOut_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RoleTimeOut_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RoleTimeOut_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RoleTimeOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RoleTimeOutArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RoleTimeOutArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_RoleTimeOutArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_RoleTimeOutArray_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server behavior.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_ServerBehavior {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_ServerBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password required for the alternative syntax of serverCommand&apos;s server-side scripting (case-sensitive)..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_ServerCommandPassword_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_ServerCommandPassword_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SQF command password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_ServerCommandPassword_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_ServerCommandPassword_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum size of the packet sent over the network. This can be set independently for both client-to-server and server-to-client(s)!
        ///!!! Only use if your router or ISP enforces a smaller packet size and you have connection problems with the game.
        ///Desync could happen if MaxSizeGuaranteed/MaxSizeNonuaranteed values above maxPacketSize are used..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_SocketsMaxPacketSize_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_SocketsMaxPacketSize_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max package size.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_SocketsMaxPacketSize_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_SocketsMaxPacketSize_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Limit value for the maximum length of Steam Query packets. Increasing this value is dangerous, as it can cause the Arma 3 server to send UDP packets that are larger than the MTU. This causes UDP packets to be fragmented, which is not supported by some older routers. However, increasing this value fixes the length limitation of the modlists in Arma 3: Launcher..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_SteamProtocolMaxSize_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_SteamProtocolMaxSize_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max steam package size.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_SteamProtocolMaxSize_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_SteamProtocolMaxSize_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates an automatic port mapping on a UPNP/IGD enabled router, if enabled. This option allows you to create a server behind NAT (the router must have a public IP and support UPNP/IGD protocol).
        ///
        ///If this setting is enabled, the server startup may be delayed by 600 seconds (default UDP timeout of 10 minutes) if it is blocked by a firewall, bad routing, etc. Therefore, it is recommended to disable this setting in such cases..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Upnp_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Upnp_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPNP.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Upnp_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Upnp_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required number of players for the start of the mission selection.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VoteMissionPlayers_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VoteMissionPlayers_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vote mission players.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VoteMissionPlayers_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VoteMissionPlayers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Percentage of votes needed to confirm a vote..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VoteThreshold_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VoteThreshold_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vote threshold.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VoteThreshold_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VoteThreshold_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VotingTimeOut_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VotingTimeOut_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VotingTimeOut_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VotingTimeOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VotingTimeOutArray_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VotingTimeOutArray_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_VotingTimeOutArray_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_VotingTimeOutArray_Title", resourceCulture);
            }
        }
    }
}
