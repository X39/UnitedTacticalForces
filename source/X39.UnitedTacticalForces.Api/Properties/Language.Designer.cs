//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace X39.UnitedTacticalForces.Api.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Language {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Language() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("X39.UnitedTacticalForces.Api.Properties.Language", typeof(Language).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host.
        /// </summary>
        internal static string ServerController_Arma3_Host {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port on which the dedicated server should listen..
        /// </summary>
        internal static string ServerController_Arma3_Host_Port_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Port_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port.
        /// </summary>
        internal static string ServerController_Arma3_Host_Port_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_Port_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loads the specified subfolders for various server-side (not transferred to clients) mods. Separated by semicolons. Absolute path and multiple stacked folders are possible.
        ///In Linux, arguments for multiple folders require the following separator syntax: -mod=mod1\;mod2\;mod3..
        /// </summary>
        internal static string ServerController_Arma3_Host_ServerMod_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_ServerMod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server mods.
        /// </summary>
        internal static string ServerController_Arma3_Host_ServerMod_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_Host_ServerMod_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of player uids (SteamID64) that are able to #login without providing a password..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Admins_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Admins_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admins.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Admins_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Admins_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of player Uids (SteamId64) that are allowed to ignore the rules of allowedFilePatching and verifySignatures so they can join the server with any mods of their choice.
        ///Signature errors are still logged by the server on connection and can kick the user if the error occurs before the server knows the client&apos;s SteamID, e.g. if they try to join with completely unsigned pbo&apos;s..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_FilePatchingExceptions_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_FilePatchingExceptions_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File patching exceptions.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_FilePatchingExceptions_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_FilePatchingExceptions_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_GeneralGroup {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_GeneralGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless Client IPs. Im Falle mehrerer Headless Clients sind mehrere Verbindungen und Adressen zulässig..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_HeadlessClients_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_HeadlessClients_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Headless client IPs.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_HeadlessClients_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_HeadlessClients_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server name visible in the game browser..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Hostname_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Hostname_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Servername.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Hostname_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Hostname_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declares clients with unlimited bandwidth and almost no latency..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LocalClient_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LocalClient_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local client IPs.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_LocalClient_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_LocalClient_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of players that can connect to the server. The final number is the smaller value between the number given here and the number of mission slots..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxPlayers_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxPlayers_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum players.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_MaxPlayers_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_MaxPlayers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message displayed when connecting to the server..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Motd_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Motd_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Motd.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Motd_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Motd_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for the connection to the server..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Password_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Password_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_Password_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_Password_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password to protect admin access via &quot;#login &lt;PASSWORD&gt;&quot;..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_PasswordAdmin_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_PasswordAdmin_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admin password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_PasswordAdmin_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_PasswordAdmin_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password required for the alternative syntax of serverCommand&apos;s server-side scripting (case-sensitive)..
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_ServerCommandPassword_Description {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_ServerCommandPassword_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SQF command password.
        /// </summary>
        internal static string ServerController_Arma3_ServerCfg_ServerCommandPassword_Title {
            get {
                return ResourceManager.GetString("ServerController_Arma3_ServerCfg_ServerCommandPassword_Title", resourceCulture);
            }
        }
    }
}
