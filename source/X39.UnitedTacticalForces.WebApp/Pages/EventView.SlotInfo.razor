@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using X39.UnitedTacticalForces.WebApp.Helpers
@using X39.UnitedTacticalForces.WebApp.Services
@using X39.UnitedTacticalForces.WebApp.Services.EventRepository
@using X39.UnitedTacticalForces.WebApp.Services.SlotRepository
@using X39.Util
@using System.Collections
@using System.Collections.Immutable
@inject ISlotRepository SlotRepository
@inject ISnackbar Snackbar
@inject IStringLocalizer<Language> Localizer
@inject MeService Me
@inject IDialogService DialogService
<div class="d-flex flex-column justify-space-between" style="height: 100%;">
    @if (Me.Eval((user) => user.PrimaryKey == Event.PrimaryKey) || Me.IsInRolesOrAdmin(Claims.EventSlotCreate, Claims.EventSlotDelete, Claims.EventSlotUpdate))
    {
        <MudFileUpload T="IBrowserFile"
                       FilesChanged="MergeSlotsFromMissionFileAsync"
                       MaximumFileCount="1"
                       Accept=".sqm"
                       Class="ma-0">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Disabled="Disabled"
                           Style="border-radius: 0;"
                           FullWidth="true"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Localizer[nameof(Language.Pages_EventView_SynchronizeSlotsWithMission)]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    }
    <MudExpansionPanels MultiExpansion="true" Class="overflow-y-scroll">
        @foreach (var slotGroup in SlotGroups)
        {
            <MudExpansionPanel @key="slotGroup.Name" Text="@slotGroup.Name" IsInitiallyExpanded="true">
                <MudStack>
                    @foreach (var slot in slotGroup)
                    {
                        <div class="d-flex @(Breakpoint is not (Breakpoint.Xs or Breakpoint.Sm) ? "flex-row" : "flex-column")" style="@((slot.IsVisible ?? false) ? string.Empty : "opacity: 50%")">
                            <MudText Class="align-self-center">@($"{slot.Title}")</MudText>
                            <UtfUser Class="@(Breakpoint is not (Breakpoint.Xs or Breakpoint.Sm) ? "mx-4" : "")" User="@slot.AssignedTo"/>
                            <MudSpacer/>
                            <MudButton StartIcon="@Icons.Material.Filled.AssignmentTurnedIn"
                                       Disabled="@(GetDisableSelfInteraction(slot))"
                                       Color="Color.Primary"
                                       OnClick="@(() => AssignToSelfAsync(slot))">
                                @Localizer[nameof(Language.Pages_EventView_AssignToSelf)]
                            </MudButton>
                            @if (!Disabled && (Me.IsInRoleOrAdmin(Claims.EventSlotAssign, Claims.EventSlotIgnore, Claims.EventSlotUpdate) || Me.Eval((user) => user.PrimaryKey == Event.HostedByFk)))
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.AssignmentInd"
                                           Color="Color.Primary"
                                           OnClick="@(() => AssignToUserAsync(slot))">
                                    @Localizer[nameof(Language.Pages_EventView_AssignToUser)]
                                </MudButton>
                                <MudCheckBox Checked="@(slot.IsSelfAssignable ?? true)"
                                             Class="align-self-center"
                                             CheckedChanged="@((bool v) => SetIsSelfAssignableAsync(slot, v))"
                                             Label="@Localizer[nameof(Language.Pages_EventView_SelfAssignable)]"/>
                                <MudCheckBox Checked="@(slot.IsVisible ?? true)"
                                             Class="align-self-center"
                                             CheckedChanged="@((bool v) => SetIsVisibleAsync(slot, v))"
                                             Label="@Localizer[nameof(Language.Pages_EventView_Visible)]"/>
                            }
                        </div>
                    }
                </MudStack>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</div>
@if (_isParsing)
{
    <MudProgressCircular Style="position: absolute; left: calc(66.666667%); top: calc(50%);" Indeterminate="true"/>
}

@code {

    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; } = Breakpoint.Always;
    
    private bool _isParsing;
    [Parameter, EditorRequired, Required]
    public IReadOnlyCollection<EventView.SlotGroup> SlotGroups { get; set; }= ArraySegment<EventView.SlotGroup>.Empty;

    [Parameter, EditorRequired, Required]
    public EventCallback ParentStateHasChanged { get; set; }

    [Parameter, EditorRequired, Required]
    public EventCallback Reload { get; set; }

    [Parameter, EditorRequired, Required]
    public bool Disabled { get; set; }

    [Parameter, EditorRequired, Required]
    public Event Event { get; set; } = null!;

    private async Task PropagateStateHasChanged()
    {
        await ParentStateHasChanged.InvokeAsync()
            .ConfigureAwait(false);
        await InvokeAsync(StateHasChanged)
            .ConfigureAwait(false);
    }

    private async Task MergeSlotsFromMissionFileAsync(IBrowserFile arg)
    {
        try
        {
            [Conditional("DEBUG")]
            static void DebugLine(string s) => Console.WriteLine(s);

            using var isParsingDisposable = new Disposable(
                () => _isParsing = true,
                () => _isParsing = false);

            IReadOnlyCollection<EventSlot> parsedSlots;
            await using (var stream = arg.OpenReadStream(100 /*mb*/* 1024 /*kb*/* 1024 /*b*/))
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream)
                    .ConfigureAwait(false);
                memoryStream.Seek(0, SeekOrigin.Begin);
                var configToSlots = new ConfigToSlots(Localizer, Snackbar);
                try
                {
                    (parsedSlots, var success) = configToSlots.GetSlots(memoryStream);
                    if (!success)
                        return;
                }
                catch
                {
                    return;
                }
            }
            if (parsedSlots.Select((eventSlot) => $"{eventSlot.Group}@{eventSlot.Title}").Distinct().Count() == parsedSlots.Count)
            {
                Snackbar.Add(Localizer[nameof(Language.Pages_EventView_SlotsSharingSameNameIsNotRecommended)], Severity.Warning);
            }

            var parsedEventSlotWasHit = parsedSlots.ToDictionary((q) => q, (_) => false);
            var existingEventSlots = SlotGroups.SelectMany((q) => q).ToArray();
            var existingEventSlotWasHit = existingEventSlots.ToDictionary((q) => q, (_) => false);
            var slotMatch = new Dictionary<EventSlot, EventSlot>();

            foreach (var existingEventSlot in existingEventSlots)
            {
                var parsedEventSlot = parsedEventSlotWasHit
                    .Where((q) => !q.Value && existingEventSlot.EqualIdentificationData(q.Key))
                    .Select((q) => q.Key)
                    .FirstOrDefault();
                if (parsedEventSlot is null)
                    continue;
                DebugLine($"Slot {existingEventSlot.EventFk}--{existingEventSlot.SlotNumber} {existingEventSlot.Group}@{existingEventSlot.Title} was found with {parsedEventSlot.Group}@{parsedEventSlot.Title}");
                existingEventSlotWasHit[existingEventSlot] = true;
                parsedEventSlotWasHit[parsedEventSlot] = true;
                slotMatch[existingEventSlot] = parsedEventSlot;
            }
            var slotsToRemove = existingEventSlotWasHit
                .Where((q) => !q.Value)
                .Select((q) => q.Key)
                .ToArray();
            var slotsToAdd = parsedEventSlotWasHit
                .Where((q) => !q.Value)
                .Select((q) => q.Key)
                .ToArray();
            var slotsToUpdate = slotMatch
                .Where((q) => !q.Key.EqualData(q.Value))
                .Select((q) => (existing: q.Key, parsed:q.Value))
                .ToArray();
            try
            {
                foreach (var eventSlot in slotsToRemove)
                {
                    await SlotRepository.DeleteSlotAsync(eventSlot)
                        .ConfigureAwait(false);
                }
                foreach (var (existingEventSlot, parsedEventSlot) in slotsToUpdate)
                {
                    await SlotRepository.UpdateSlotAsync(existingEventSlot, parsedEventSlot)
                        .ConfigureAwait(false);
                }
                foreach (var eventSlot in slotsToAdd)
                {
                    await SlotRepository.CreateSlotAsync(Event, eventSlot)
                        .ConfigureAwait(false);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message);
            }
            finally
            {
                await Reload.InvokeAsync()
                    .ConfigureAwait(false);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AssignToSelfAsync(EventSlot slot)
    {
        if (Event.UserMetas?.Any((q) => q.Acceptance != EEventAcceptance.Accepted) ?? false)
        {
            var result = await Dialogs.ConfirmSlotSelection.ShowAsync(DialogService)
                .ConfigureAwait(false);
            if (!result)
                return;
        }
        try
        {
            await SlotRepository.SelfAssignSlotAsync(slot)
                .ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            await Reload.InvokeAsync()
                .ConfigureAwait(false);
        }
    }

    private async Task AssignToUserAsync(EventSlot slot)
    {
        try
        {
            var user = await Dialogs.SelectUserDialog.ShowAsync(DialogService, slot.AssignedTo)
                .ConfigureAwait(false);
            if (user is null)
                return;
            if (user.PrimaryKey != slot.AssignedToFk)
            {
                await SlotRepository.AssignSlotAsync(slot, user)
                    .ConfigureAwait(false);
                slot.AssignedTo = user;
                slot.AssignedToFk = user.PrimaryKey;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            await Reload.InvokeAsync()
                .ConfigureAwait(false);
        }
    }

    private async Task SetIsSelfAssignableAsync(EventSlot slot, bool flag)
    {
        slot.IsSelfAssignable = flag;
        await SlotRepository.UpdateSlotAsync(slot, slot);
    }

    private async Task SetIsVisibleAsync(EventSlot slot, bool flag)
    {
        slot.IsVisible = flag;
        await SlotRepository.UpdateSlotAsync(slot, slot);
    }

    private bool GetDisableSelfInteraction(EventSlot slot)
    {
        if (!Me.IsAuthenticated)
    // User is not logged in.
            return true;
        if (Disabled)
    // All interactions are disabled for this UI.
            return true;
        if (slot.AssignedToFk is not null)
    // Slot is already assigned.
            return true;
        if (!(slot.IsSelfAssignable ?? true)
            && !Me.IsInRoleOrAdmin(Claims.EventSlotAssign, Claims.EventSlotIgnore, Claims.EventSlotUpdate)
            && Event is not null
            && !Me.Eval((user) => user.PrimaryKey == Event.HostedByFk))
    // Slot cannot be self-assigned
            return true;
        return false;
    }

}