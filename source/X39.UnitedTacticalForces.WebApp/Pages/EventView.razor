@page "/events/{EventId:guid}"
@using X39.UnitedTacticalForces.WebApp.Services.EventRepository
@using X39.UnitedTacticalForces.WebApp.Services.SlotRepository
@using System.Collections
@using System.Collections.Immutable
@inject IEventRepository EventRepository
@inject ISlotRepository SlotRepository
@inject NavigationManager NavigationManager

@if (Breakpoint is (Breakpoint.Xs or Breakpoint.Sm))
{
    @if (_event is null)
    {
        <MudSkeleton Height="100%" Width="100%" Style="transform: none"/>
    }
    else
    {
        <MudStack>
            <EventView_EventInfo Disabled="_disableInteractions" Event="_event" ParentStateHasChanged="StateHasChanged" Reload="ReloadAsync"/>
            <EventView_SlotInfo Disabled="_disableInteractions" Event="_event" ParentStateHasChanged="PropagateStateHasChanged" SlotGroups="_slotGroups" Reload="ReloadAsync"/>
        </MudStack>
    }
}
else
{
    @if (_event is null)
    {
        <MudGrid Spacing="0">
            <MudItem xs="4"
                     Style="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "height: calc(100vh - 56px)" : "height: 100vh;")"
                     Class="mud-theme-primary d-flex flex-column flex-nowrap justify-space-between">
                <MudSkeleton Height="100%" Width="100%" Style="transform: none"/>
            </MudItem>
            <MudItem xs="8"
                     Style="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "height: calc(100vh - 56px)" : "height: 100vh;")">
                <MudSkeleton Height="100%" Width="100%" Style="transform: none"/>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid Spacing="0">
            <MudItem xs="4"
                     Style="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "height: calc(100vh - 56px)" : "height: 100vh;")"
                     Class="mud-theme-primary d-flex flex-column flex-nowrap justify-space-between">
                <EventView_EventInfo Disabled="_disableInteractions" Event="_event" ParentStateHasChanged="StateHasChanged" Reload="ReloadAsync"/>
            </MudItem>
            <MudItem xs="8"
                     Style="@(Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "height: calc(100vh - 56px)" : "height: 100vh;")">
                <EventView_SlotInfo Disabled="_disableInteractions" Event="_event" ParentStateHasChanged="PropagateStateHasChanged" SlotGroups="_slotGroups" Reload="ReloadAsync"/>
            </MudItem>
        </MudGrid>
    }
}


@code {

    private async Task PropagateStateHasChanged()
    {
        await ReloadAsync()
            .ConfigureAwait(false);
        await InvokeAsync(StateHasChanged)
            .ConfigureAwait(false);
    }

    [CascadingParameter]
    public Breakpoint Breakpoint { get; private set; } = Breakpoint.Always;

    [Parameter]
    public Guid EventId { get; set; }

    private Event? _event;
    private bool _disableInteractions;
    private IReadOnlyCollection<SlotGroup> _slotGroups = ArraySegment<SlotGroup>.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync()
            .ConfigureAwait(false);
    }

    private async Task ReloadAsync()
    {
        _event = null;
        var tmp = await EventRepository.GetEventAsync(EventId)
            .ConfigureAwait(false);
        if (tmp is null)
        {
            await Console.Error.WriteLineAsync($"No event with {EventId} was found")
                .ConfigureAwait(false);
            NavigationManager.NavigateTo("/events");
            return;
        }

        _disableInteractions = tmp.ScheduledFor < DateTimeOffset.Now;
        var slots = await SlotRepository.AllSlotsAsync(tmp)
            .ConfigureAwait(false);
        _slotGroups = CreateSlotGroupsFromSlots(slots);
        _event = tmp;
    }

    private static IReadOnlyCollection<SlotGroup> CreateSlotGroupsFromSlots(IReadOnlyCollection<EventSlot> slots)
    {
        return slots
            .GroupBy((q) => q.Group)
            .Select((q) => new SlotGroup(q.Key ?? string.Empty, q))
            .OrderBy((q) => q.Name)
            .ToImmutableArray();
    }

    public class SlotGroup : IReadOnlyCollection<EventSlot>
    {
        private readonly List<EventSlot> _data;
        public string Name { get; }


        public IEnumerator<EventSlot> GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable) _data).GetEnumerator();
        }

        public int Count => _data.Count;


        public SlotGroup(string name, IEnumerable<EventSlot> slots)
        {
            Name = name;
            _data = slots.OrderBy((q) => q.SlotNumber).ToList();
        }
    }

}