@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.Contracts
@using X39.UnitedTacticalForces.WebApp.Services
@using X39.UnitedTacticalForces.WebApp.Services.EventRepository
@inject IEventRepository EventRepository
@inject IDialogService DialogService
@inject MeService Me
@if (Me.IsInRoleOrAdmin(Claims.EventCreate))
{
    <MudIconButton Icon="@Icons.Material.Filled.CopyAll" Color="Color.Success" OnClick="CloneEventAsync"/>
}

@code {

    [Parameter, Required, EditorRequired]
    public Event Event { get; set; } = null!;


    private async Task CloneEventAsync()
    {
        var eventItem = Event.ShallowCopy();
        eventItem.AcceptedCount = default;
        eventItem.PrimaryKey = default;
        eventItem.MaybeCount = default;
        eventItem.RejectedCount = default;
        eventItem.UserMetas = default;
        eventItem.ScheduledFor = default;
        eventItem.Owner = default;
        eventItem.ScheduledForOriginal = default;
        eventItem.TimeStampCreated = default;
        eventItem.Terrain = Event.Terrain;
        eventItem.HostedBy = Event.HostedBy;
        eventItem.ModPackRevision = Event.ModPackRevision;
        var updatedEvent = await Dialogs.ModifyEventDialog.ShowAsync(DialogService, eventItem, isNew: true)
            .ConfigureAwait(false);
        if (updatedEvent is null)
            return;
        Contract.Assert(updatedEvent == eventItem);
        await EventRepository.CreateEventAsync(eventItem)
            .ConfigureAwait(false);
    }

}