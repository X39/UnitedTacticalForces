@using System.ComponentModel.DataAnnotations
@using X39.UnitedTacticalForces.WebApp.Services.ModPackRepository
@using X39.Util
@using X39.Util.Collections
@inject IStringLocalizer<Language> Localizer
@inject ISnackbar Snackbar
@inject IModPackRepository ModPackRepository
<MudDialog>
    <DialogContent>
        <MudTextField Label="@Localizer[nameof(Language.Dialogs_ModifyModPackDialog_Inputs_Title)]" @bind-Value="@ModPack.Title"/>
        <MudSelect T="ModPackDefinition" MultiSelection="true" @bind-SelectedValues="_selectedModPackDefinitions"
                   ToStringFunc="@((q)=>q.Title ?? "")">
            @foreach (var modPackDefinition in _modPacks)
            {
                <MudSelectItem T="ModPackDefinition" Value="@modPackDefinition">@modPackDefinition.Title</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer[nameof(Language.Common_Cancel)]</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="IsSubmitDisabled">@(IsNew ? Localizer[nameof(Language.Common_Create)] : Localizer[nameof(Language.Common_Submit)])</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter, EditorRequired, Required]
    public ModPackDefinition ModPack { get; set; } = null!;

    [Parameter]
    public bool IsNew { get; set; }

    private bool IsSubmitDisabled => IsNew
                                     && (
                                         ModPack.Title.IsNullOrWhiteSpace()
                                         || _selectedModPackDefinitions.None());


    private IEnumerable<ModPackDefinition> _selectedModPackDefinitions = new List<ModPackDefinition>();
    private string _fileName = string.Empty;
    private List<ModPackDefinition> _modPacks = new();

    private Task Submit()
    {
        ModPack.ModPackRevisions ??= new List<ModPackRevision>();
        ModPack.ModPackRevisions.Clear();
        foreach (var selectedModPack in _selectedModPackDefinitions)
        {
            var modPackRevisions = selectedModPack.ModPackRevisions ?? ArraySegment<ModPackRevision>.Empty;
            ModPack.ModPackRevisions.Add(modPackRevisions.FirstOrDefault((q) => q.IsActive ?? false) ?? modPackRevisions.First());
        }
        MudDialog.Close(DialogResult.Ok(ModPack));
        return Task.CompletedTask;
    }

    void Cancel() => MudDialog.Cancel();


    protected override async Task OnInitializedAsync()
    {
        MudDialog.Title = IsNew
            ? Localizer[nameof(Language.Dialogs_ModifyModPackDialog_TitleNew)]
            : Localizer[nameof(Language.Dialogs_ModifyModPackDialog_Title)];
        var modPacks = new List<ModPackDefinition>();
        while (true)
        {
            var result = await ModPackRepository.GetModPacksAsync(
                modPacks.Count, 100, false)
                .ConfigureAwait(false);
            if (result.Count == 0)
                break;
            modPacks.AddRange(result);
        }
        modPacks.RemoveAll((q) => q.IsComposition ?? false);
        _modPacks = modPacks;
        var selectedModPackDefinitions = new List<ModPackDefinition>();
        foreach (var modPackRevision in ModPack.ModPackRevisions ?? Array.Empty<ModPackRevision>())
        {
            var modPackDefinition = _modPacks.SingleOrDefault((q) => q.PrimaryKey == modPackRevision.DefinitionFk);
            if (modPackDefinition is null)
                continue;
            selectedModPackDefinitions.Add(modPackDefinition);
        }
        _selectedModPackDefinitions = selectedModPackDefinitions;
    }

    private async Task FilesChangedAsync(InputFileChangeEventArgs obj)
    {
        try
        {
            _fileName = obj.File.Name;
            await using var stream = obj.File.OpenReadStream();
            using var reader = new StreamReader(stream);
            ModPack.ModPackRevisions ??= new List<ModPackRevision> {new()};
            ModPack.ModPackRevisions.First().Html = await reader.ReadToEndAsync()
                .ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync(ex.StackTrace);
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public static async Task<ModPackDefinition?> ShowAsync(
        IDialogService dialogService,
        ModPackDefinition? modPack = default,
        bool? isNew = default)
    {
        if (!(modPack?.IsComposition ?? true))
            throw new Exception("Cannot modify a standalone mod pack using this dialog.");
        isNew ??= modPack is null;
        modPack ??= new ModPackDefinition{IsComposition = true};
        var dialogReference = await dialogService.ShowAsync<ModifyModPackCompositionDialog>(
            string.Empty,
            new DialogParameters
            {
                {nameof(IsNew), isNew},
                {nameof(ModPack), modPack.DeepCopy()},
            },
            new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                MaxWidth = MaxWidth.Large,
            })
            .ConfigureAwait(false);
        var dialogResult = await dialogReference.Result
            .ConfigureAwait(false);
        if (dialogResult.Data is not ModPackDefinition modifiedModPack)
            return null;
        modPack.Apply(modifiedModPack);
        return modifiedModPack;
    }

    private string MultiSelectionTextFunc(List<string> arg)
    {
        arg.Clear();
        arg.AddRange(_selectedModPackDefinitions.Select((q)=>q.Title ?? string.Empty));
        return string.Join(", ", arg);
    }

}