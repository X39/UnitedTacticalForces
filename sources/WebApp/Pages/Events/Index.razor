@using X39.UnitedTacticalForces.WebApp.Api.Models
@using X39.UnitedTacticalForces.WebApp.Data
@using X39.UnitedTacticalForces.WebApp.Services.EventRepository
@using X39.UnitedTacticalForces.WebApp.Services.UserRepository
@using X39.UnitedTacticalForces.WebApp.Services.ModPackRepository
@using X39.UnitedTacticalForces.WebApp.Services.TerrainRepository
@using X39.UnitedTacticalForces.WebApp.Services
@using X39.UnitedTacticalForces.WebApp.Pages.Events.Upcoming
@page "/events"
@inject IEventRepository EventRepository
@inject IUserRepository UserRepository
@inject IModPackRepository ModPackRepository
@inject ITerrainRepository TerrainRepository
@inject IStringLocalizer<Language> Localizer
@inject IDialogService DialogService
@inject BaseUrl BaseUrl
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject MeService Me
@attribute [Authorize]
<PageTitle>@Localizer[nameof(Language.Pages_Events_Title)]</PageTitle>
<MudTable @ref="_mudTable"
          Dense="true"
          ServerData="ServerDataAsync"
          RowsPerPage="50"
          Virtualize="true"
          Height="@Breakpoint.ToFullPageTableHeight()"
          FixedFooter="true"
          FixedHeader="true">
    <ColGroup>
        <col style="width: 0"/>
        <col style="width: 0"/>
        <col/>
        <col style="width: 0"/>
        <col style="width: 0"/>
        <col style="width: 0"/>
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @if (_onlyHostedByMe)
            {
                @Localizer[nameof(Language.Pages_Events_MyEvents)]
            }
            else
            {
                @Localizer[nameof(Language.Pages_Events_AllEvents)]
            }
        </MudText>
        <MudSpacer/>
        <MudTooltip Text="@Localizer[nameof(Language.Pages_Events_MyEventsOnly_ToolTip)]">
            <MudToggleIconButton
                Icon="@Icons.Material.Filled.PersonOff"
                ToggledIcon="@Icons.Material.Filled.Person"
                @bind-Toggled="@OnlyHostedByMe"/>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_HostedBy)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_ScheduledFor)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_Title)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_Terrain)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_ModPack)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Events_Table_Interactions)]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_HostedBy)]">
            <UtfUser Style="white-space: nowrap;" User="@context.HostedBy"/>
        </MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_ScheduledFor)]">
            <div style="white-space: nowrap" class="d-inline-flex align-center gap-1">
                @if (context.PlainEvent.ScheduledFor?.ToLocalTime() < DateTime.Today)
                {
                    <MudTooltip>
                        <TooltipContent>
                            <MudText>@Localizer[nameof(Language.Pages_Events_Table_ScheduledFor_EventAlreadyOccured)]</MudText>
                        </TooltipContent>
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.WatchLater" Color="Color.Warning"/>
                        </ChildContent>
                    </MudTooltip>
                }
                @(
                context.PlainEvent
                    .ScheduledFor
                    ?.ToLocalTime()
                    .ToString("g")
                )
            </div>
        </MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_Title)]">
            @context.PlainEvent.Title
        </MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_Terrain)]">
            @if (context.Terrain is not null)
            {
                <div style="white-space: nowrap">
                    <MudText>@(context.Terrain.Title)</MudText>
                </div>
            }
        </MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_ModPack)]">
            @if (context.ModPackRevision is not null)
            {
                <div class="d-inline-flex align-center" style="white-space: nowrap">
                    <MudText>@(context.ModPackRevision?.DefinitionTitle)</MudText>
                    <UtfModPackDownloadButton
                        bind-TimeStampDownloaded="@context.ModPackRevision.MetaTimeStampDownloaded"
                        IsComposition="@(context.ModPackRevision.DefinitionIsComposition ?? false)"
                        RevisionCreated="@(context.ModPackRevision.TimeStampCreated ?? default)"
                        ModPackKey="@(context.ModPackRevision.DefinitionPrimaryKey ?? default)"
                        RevisionKey="@(context.ModPackRevision.PrimaryKey ?? default)"
                    />
                </div>
            }
        </MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Events_Table_Interactions)]">
            <MudButtonGroup>
                <Index_HeaderActions_ModifyButton Event="context"
                                                            ParentStateHasChanged="PropagateStateHasChanged"/>
                <Index_HeaderActions_CloneButton Event="context"/>
                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Primary"
                               OnClick="@(() => CopyEventUrlToClipboardAsync(context))"/>
                <MudButton StartIcon="@Icons.Material.Filled.KeyboardCapslock" Href="@($"/events/{context.PlainEvent.PrimaryKey}")"
                           Color="Color.Primary">
                    @Localizer[nameof(Language.Pages_Events_EventCard_Slots)]
                </MudButton>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@(new[] { 50, 100, 250, 500 })"/>
    </PagerContent>
    <FooterContent>
        <MudTd Style="text-align: right" UserAttributes="@(new Dictionary<string, object> { { "colspan", "6" } })">
            @if (Me.HasClaimOrEventAdmin(Claims.Creation.Events))
            {
                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="CreateNewEventAsync">
                    @Localizer[nameof(Language.Pages_Events_CreateNewEvent)]
                </MudButton>
            }
        </MudTd>
    </FooterContent>
</MudTable>

@code {

    private bool _onlyHostedByMe;

    [CascadingParameter]
    public Breakpoint Breakpoint { get; private set; } = Breakpoint.Always;

    private bool OnlyHostedByMe
    {
        get => _onlyHostedByMe;
        set
        {
            _onlyHostedByMe = value;
            _ = _mudTable.ReloadServerData()
                .ConfigureAwait(false);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);
    }

    private          long                                 _eventCounts = -1;
    private          MudTable<Event>                      _mudTable    = null!;
    private readonly Dictionary<Guid, UserDto>            _users       = new();
    private readonly Dictionary<long, ModPackRevisionDto> _modPacks    = new();
    private readonly Dictionary<long, PlainTerrainDto>    _terrains    = new();

    private async Task<TableData<Event>> ServerDataAsync(TableState arg, CancellationToken cancellationToken)
    {
        if (_eventCounts == -1)
            _eventCounts = await EventRepository.GetEventCountAsync(OnlyHostedByMe, cancellationToken)
                .ConfigureAwait(false);
        var items = await EventRepository.GetEventsAsync(arg.Page * arg.PageSize, arg.PageSize, OnlyHostedByMe, cancellationToken)
            .ConfigureAwait(false);
        var results = new List<Event>();
        foreach (var plainEvent in items)
        {
            var eventItem = new Event
            {
                PlainEvent = plainEvent,
            };
            results.Add(eventItem);
            if (plainEvent.OwnerFk is not null)
            {
                var ownerFk = plainEvent.OwnerFk.Value;
                if (!_users.TryGetValue(ownerFk, out var user))
                {
                    var tmp = await UserRepository.GetUserAsync(ownerFk, cancellationToken)
                        .ConfigureAwait(false);
                    if (tmp is null)
                        continue;
                    _users[ownerFk] = user = tmp;
                }

                eventItem.Owner = user;
            }

            if (plainEvent.HostedByFk is not null)
            {
                var hostedByFk = plainEvent.HostedByFk.Value;
                if (!_users.TryGetValue(hostedByFk, out var user))
                {
                    var tmp = await UserRepository.GetUserAsync(hostedByFk, cancellationToken)
                        .ConfigureAwait(false);
                    if (tmp is null)
                        continue;
                    _users[hostedByFk] = user = tmp;
                }

                eventItem.HostedBy = user;
            }

            if (plainEvent.ModPackRevisionFk is not null)
            {
                var modPackRevisionFk = plainEvent.ModPackRevisionFk.Value;
                if (!_modPacks.TryGetValue(modPackRevisionFk, out var modPack))
                {
                    var tmp = await ModPackRepository.GetModPackRevisionAsync(modPackRevisionFk, cancellationToken)
                        .ConfigureAwait(false);
                    if (tmp is null)
                        continue;
                    _modPacks[modPackRevisionFk] = modPack = tmp;
                }

                eventItem.ModPackRevision = modPack;
            }

            if (plainEvent.TerrainFk is not null)
            {
                var terrainFk = plainEvent.TerrainFk.Value;
                if (!_terrains.TryGetValue(terrainFk, out var terrain))
                {
                    var tmp = await TerrainRepository.GetTerrainAsync(terrainFk, cancellationToken)
                        .ConfigureAwait(false);
                    if (tmp is null)
                        continue;
                    _terrains[terrainFk] = terrain = tmp;
                }

                eventItem.Terrain = terrain;
            }
        }

        return new TableData<Event>
        {
            TotalItems = (int) _eventCounts,
            Items      = results,
        };
    }

    private async Task CreateNewEventAsync()
    {
        var eventItem = await Dialogs.ModifyEventDialog
            .ShowAsync(DialogService)
            .ConfigureAwait(false);
        if (eventItem is null)
            return;
        await EventRepository.CreateEventAsync(eventItem)
            .ConfigureAwait(false);
        await _mudTable.ReloadServerData()
            .ConfigureAwait(false);
    }

    private async Task PropagateStateHasChanged()
    {
        await InvokeAsync(StateHasChanged)
            .ConfigureAwait(false);
    }

    private async Task CopyEventUrlToClipboardAsync(Event eventItem)
    {
        var url = BaseUrl.ResolveSelfUrl($"/events/{eventItem.PlainEvent.PrimaryKey}");
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url)
            .ConfigureAwait(false);
        Snackbar.Add(Localizer[nameof(Language.Common_CopiedToClipboard)]);
    }

}
