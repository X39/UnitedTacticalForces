@using System.ComponentModel.DataAnnotations
@using X39.UnitedTacticalForces.WebApp.Data
@using X39.UnitedTacticalForces.WebApp.Services
@using X39.Util
@inject IStringLocalizer<Language> Localizer
@inject BaseUrl BaseUrl
@inject MeService Me
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (EventItem.HostedBy is not null && EventItem.HostedBy.Avatar.Any() && EventItem.HostedBy.AvatarMimeType.IsNotNullOrWhiteSpace())
            {
                <MudAvatar Color="Color.Secondary" Image="@EventItem.HostedBy.ToImageSource()"/>
            }
            else if (EventItem.HostedBy is not null)
            {
                <MudAvatar Color="Color.Secondary">@EventItem.HostedBy.Nickname.FirstOrDefault()</MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <div class="d-inline">
                <MudLink Typo="Typo.h4" Href="@($"/events/{EventItem.PrimaryKey}")" Underline="Underline.Hover">@EventItem.Title</MudLink>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <MudText Color="@(EventItem.AcceptedCount >= EventItem.MinimumAccepted ? Color.Success : Color.Error)">@(EventItem.ScheduledFor?.ToLocalTime().ToString("g"))</MudText>
                </MudHidden>
            </div>
            @if (EventItem.Terrain is not null)
            {
                <MudText Typo="Typo.body2">@(EventItem.Terrain.Title)</MudText>
            }
            @if (EventItem.ModPackRevision is not null)
            {
                <MudText Typo="Typo.body2">@(EventItem.ModPackRevision.Definition?.Title)</MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButtonGroup>
                <UtfModPackDownloadButton ModPack="EventItem.ModPackRevision.Definition"  Revision="EventItem.ModPackRevision" Color="Color.Primary"/>
                <UpcommingEvents_HeaderActions_ModifyButton Event="EventItem" ParentStateHasChanged="PropagateStateHasChanged"/>
                <UpcommingEvents_HeaderActions_CloneButton Event="EventItem"/>
                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Primary" OnClick="CopyEventUrlToClipboardAsync"/>
            </MudButtonGroup>
        </CardHeaderActions>
    </MudCardHeader>
    @if ((EventItem.Image?.Any() ?? false) && EventItem.ImageMimeType.IsNotNullOrWhiteSpace())
    {
        <MudCardMedia Image="@EventItem.ToImageSource()" Height="250"/>
    }
    <MudCardContent>
        <div style="max-height: 50vh; overflow-y: scroll;">
            <MudMarkdown Value="@EventItem.Description"/>
        </div>
    </MudCardContent>
    <MudCardActions>
        @if (Me.IsAuthenticated)
        {
            <UpcommingEvents_Interactions_AcceptanceButton ParentStateHasChangedCallback="@(PropagateStateHasChanged)"
                                                           Acceptance="EEventAcceptance.Accepted"
                                                           AcceptanceCount="EventItem.AcceptedCount"
                                                           Event="EventItem"/>
            <UpcommingEvents_Interactions_AcceptanceButton ParentStateHasChangedCallback="@(PropagateStateHasChanged)"
                                                           Acceptance="EEventAcceptance.Maybe"
                                                           AcceptanceCount="EventItem.MaybeCount"
                                                           Event="EventItem"/>
            <UpcommingEvents_Interactions_AcceptanceButton ParentStateHasChangedCallback="@(PropagateStateHasChanged)"
                                                           Acceptance="EEventAcceptance.Rejected"
                                                           AcceptanceCount="EventItem.RejectedCount"
                                                           Event="EventItem"/>
            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Filled.KeyboardCapslock" Href="@($"/events/{EventItem.PrimaryKey}")" Color="Color.Primary">
                @Localizer[nameof(Language.Pages_Events_EventCard_Slots)]
            </MudButton>
        }
    </MudCardActions>
</MudCard>

@code {

    [Parameter, EditorRequired, Required]
    public EventCallback ParentStateHasChanged { get; set; }

    [Parameter, EditorRequired, Required]
    public Event EventItem { get; set; } = null!;

    private async Task PropagateStateHasChanged()
    {
        await ParentStateHasChanged.InvokeAsync()
            .ConfigureAwait(false);
        await InvokeAsync(StateHasChanged)
            .ConfigureAwait(false);
    }

    private async Task CopyEventUrlToClipboardAsync()
    {
        var url = BaseUrl.ResolveSelfUrl($"/events/{EventItem.PrimaryKey}");
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url)
            .ConfigureAwait(false);
        Snackbar.Add(Localizer[nameof(Language.Common_CopiedToClipboard)]);
    }

}
