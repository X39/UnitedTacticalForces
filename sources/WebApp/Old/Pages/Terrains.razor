@using X39.UnitedTacticalForces.WebApp.Services.TerrainRepository
@using X39.UnitedTacticalForces.WebApp.Services.UserRepository
@using System.Diagnostics.Contracts
@using X39.UnitedTacticalForces.WebApp.Services
@page "/terrains"
@inject ITerrainRepository         TerrainRepository
@inject IUserRepository            UserRepository
@inject IStringLocalizer<Language> Localizer
@inject IDialogService             DialogService
@inject BaseUrl                    BaseUrl
@inject MeService                  Me
@attribute [Authorize]
<PageTitle>@Localizer[nameof(Language.Pages_Terrains_Title)]</PageTitle>
<MudTable @ref="_mudTable"
          Dense="true"
          ServerData="ServerDataAsync"
          RowsPerPage="50"
          Virtualize="true"
          Height="@Breakpoint.ToFullPageTableHeight()"
          FixedFooter="true"
          FixedHeader="true">
    <ColGroup>
        <col/>
        <col style="width: 0"/>
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(Language.Pages_Terrains_AllTerrains)]
        </MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@Localizer[nameof(Language.Pages_Terrains_Table_Title)]</MudTh>
        <MudTh>@Localizer[nameof(Language.Pages_Terrains_Table_Interactions)]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Terrains_Table_Title)]">@context.Title</MudTd>
        <MudTd DataLabel="@Localizer[nameof(Language.Pages_Terrains_Table_Interactions)]">
            <MudButtonGroup>
                @if (Me.HasResourceClaimOrWikiAdmin(Claims.ResourceBased.Terrain.Modify, context.PrimaryKey?.ToString() ?? string.Empty))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" OnClick="@(() => ModifyTerrainAsync(context))"/>
                }
                @if (Me.HasResourceClaimOrWikiAdmin(Claims.ResourceBased.Terrain.Delete, context.PrimaryKey?.ToString() ?? string.Empty))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteTerrainAsync(context))"/>
                }
                @if (Me.HasClaimOrAdmin(Claims.Administrative.Terrain))
                {
                    <MudTooltip>
                        <TooltipContent>
                            <MudText>@Localizer[nameof(Language.Pages_Terrains_Table_Interactions_ShowUserPermissions)]</MudText>
                        </TooltipContent>
                        <ChildContent>
                            <MudIconButton Icon="@Icons.Material.Filled.Groups"
                                           Color="Color.Primary"
                                           OnClick="@(() => ShowUserPermissionsAsync(context))"/>
                        </ChildContent>
                    </MudTooltip>
                }
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@(new[] {50, 100, 250, 500})"/>
    </PagerContent>
    <FooterContent>
        <MudTd Style="text-align: right" UserAttributes="@(new Dictionary<string, object> {{"colspan", "2"}})">
            @if (Me.HasClaimOrWikiAdmin(Claims.Creation.Wiki))
            {
                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="CreateNewTerrainAsync">
                    @Localizer[nameof(Language.Pages_Terrains_CreateNewTerrain)]
                </MudButton>
            }
        </MudTd>
    </FooterContent>
</MudTable>

@code {

    [CascadingParameter]
    public Breakpoint Breakpoint { get; private set; } = Breakpoint.Always;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10);
    }

    private long              _terrainCounts = -1;
    private MudTable<Terrain> _mudTable      = null!;

    private async Task<TableData<Terrain>> ServerDataAsync(TableState arg)
    {
        if (_terrainCounts == -1)
            _terrainCounts = await TerrainRepository.GetTerrainCountAsync()
                                                    .ConfigureAwait(false);
        var items = await TerrainRepository.GetTerrainsAsync(arg.Page * arg.PageSize, arg.PageSize)
                                           .ConfigureAwait(false);
        return new TableData<Terrain>
        {
            TotalItems = (int) _terrainCounts,
            Items      = items,
        };
    }

    private async Task CreateNewTerrainAsync()
    {
        var terrain = await Dialogs.ModifyTerrainDialog.ShowAsync(DialogService)
                                   .ConfigureAwait(false);
        if (terrain is null)
            return;
        await TerrainRepository.CreateTerrainAsync(terrain)
                               .ConfigureAwait(false);
        await _mudTable.ReloadServerData()
                       .ConfigureAwait(false);
    }

    private async Task ModifyTerrainAsync(Terrain terrain)
    {
        var updatedTerrain = await Dialogs.ModifyTerrainDialog.ShowAsync(DialogService, terrain)
                                          .ConfigureAwait(false);
        if (updatedTerrain is null)
            return;
        Contract.Assert(updatedTerrain == terrain);
        await TerrainRepository.ModifyTerrainAsync(terrain)
                               .ConfigureAwait(false);
        await _mudTable.ReloadServerData()
                       .ConfigureAwait(false);
    }

    private async Task DeleteTerrainAsync(Terrain terrain)
    {
        await Dialogs.ConfirmDeletionDialog.ShowAsync(
            DialogService,
            Localizer[nameof(Language.Pages_Terrains_ConfirmDeleteOfTerrain_Description)],
            Localizer[nameof(Language.Pages_Terrains_ConfirmDeleteOfTerrain_Title)]
        );
        await TerrainRepository.DeleteTerrainAsync(terrain)
                               .ConfigureAwait(false);
        await _mudTable.ReloadServerData()
                       .ConfigureAwait(false);
    }

    private async Task ShowUserPermissionsAsync(Terrain context)
    {
        if (context.PrimaryKey.ToString() is not { } terrainPkString)
            throw new ArgumentException("Terrain has no primary key");
        await Dialogs.ResourceBasedPrivilegeDialog.ShowAsync(
            DialogService,
            new[]
            {
                Claims.ResourceBased.Terrain.All,
                Claims.ResourceBased.Terrain.Modify,
                Claims.ResourceBased.Terrain.Delete,
            },
            Claims.ResourceBased.Terrain.All,
            terrainPkString
        );
    }
}