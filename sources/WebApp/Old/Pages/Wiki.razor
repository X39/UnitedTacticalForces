@page "/wiki/{PageId:guid}"
@page "/wiki"
@using X39.UnitedTacticalForces.WebApp.Services
@using X39.UnitedTacticalForces.WebApp.Services.WikiRepository
@using X39.Util
@using X39.UnitedTacticalForces.WebApp.Dialogs
@using MudBlazor.Utilities
@using MudBlazor.Services
@using X39.UnitedTacticalForces.WebApp.Data
@inject MeService MeService
@inject IWikiRepository WikiRepository
@inject IDialogService DialogService
@inject IStringLocalizer<Language> Localizer
@inject IBreakpointService BreakpointService
@implements IAsyncDisposable
<div class="gap-2 pa-4" style="@_containerStyle">
    <MudPaper Style="grid-area: Navigation;" MinWidth="200px">
        <Wiki_Category Category="@GetRootCategory()"/>
    </MudPaper>
    @if (MeService.HasBaseClaimOrWikiAdmin(Claims.Wiki.All))
    {
        <MudPaper Style="grid-area: Controls; padding: 0 0 0 1em;" Class="flex-shrink-1 d-flex flex-row">
            <MudSelect T="WikiPageRevision"
                       MultiSelection="false"
                       @bind-SelectedValues="@(_selectedRevisions)">
                @foreach (var revision in _page?.Revisions ?? ArraySegment<WikiPageRevision>.Empty)
                {
                    <MudSelectItem T="WikiPageRevision" Value="@revision">
                        <span>@revision.Comment (@(revision.TimeStampCreated?.ToString("s")))</span>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudSpacer/>
            <MudButtonGroup>
                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Disabled="@(_page is null)" OnClick="DeleteWikiPageAsync"/>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Disabled="@(_page is null)" OnClick="ModifyWikiPageAsync"/>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddWikiPageAsync"/>
                </MudHidden>
            </MudButtonGroup>
        </MudPaper>
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
            <div style="position: fixed; right: 2rem; bottom: 2rem;">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddWikiPageAsync"/>
            </div>
        </MudHidden>
    }
    <MudPaper Style="grid-area: Content;" Class="flex-grow-1 overflow-x-scroll pa-2">
        <MudMarkdown @key="_selectedRevisions" Value="@(_selectedRevisions.FirstOrDefault()?.Markdown ?? string.Empty)"/>
    </MudPaper>
</div>

@code {

    private string _containerStyle = string.Empty;

    [CascadingParameter]
    public Breakpoint Breakpoint { get; private set; } = Breakpoint.Always;

    [Parameter]
    public Guid? PageId { get; set; }

    [Parameter]
    public string? PageName { get; set; }

    private IEnumerable<WikiPageRevision> _selectedRevisions = Enumerable.Empty<WikiPageRevision>();
    private WikiPage? _page;
    private readonly List<WikiPageHeader> _wikiPageHeaders = new();
    private BreakpointServiceSubscribeResult? _breakpointSubscription;

    private Guid? _previousPageId;

    protected override async Task OnParametersSetAsync()
    {
        if (PageId is {} pageId && pageId != _previousPageId)
        {
            _page = await WikiRepository.GetWikiPageAsync(pageId, MeService.HasBaseClaimOrWikiAdmin(Claims.Wiki.All))
                .ConfigureAwait(false);
            _selectedRevisions = _page.Revisions?.MaxBy((q) => q.TimeStampCreated)?.MakeEnumerable()
                                 ?? Enumerable.Empty<WikiPageRevision>();
            _previousPageId = pageId;
            StateHasChanged();
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var wikiPageHeaders = await WikiRepository.GetWikiPageHeadersAsync()
            .ConfigureAwait(false);
        _wikiPageHeaders.AddRange(wikiPageHeaders);
        _containerStyle = GetContainerStyle(Breakpoint).Build();
        _breakpointSubscription = await BreakpointService.SubscribeAsync(BreakpointChanged);

        await base.OnInitializedAsync();
    }

    private StyleBuilder GetContainerStyle(Breakpoint breakpoint)
    {
        switch (breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
            case Breakpoint.None:
            case Breakpoint.Always:
                return new StyleBuilder()
                    .AddStyle("height", Breakpoint.ToFullPageHeight())
                    .AddStyle("display", @"grid")
                    .AddStyle("grid-template-columns", @"1f")
                    .AddStyle("grid-template-rows", @"min-content 1fr min-content")
                    .AddStyle("grid-template-areas", @"""Navigation"" ""Content"" ""Controls""");
            case Breakpoint.Md:
            case Breakpoint.Lg:
            case Breakpoint.Xl:
            case Breakpoint.Xxl:
                return new StyleBuilder()
                    .AddStyle("height", Breakpoint.ToFullPageHeight())
                    .AddStyle("display", @"grid")
                    .AddStyle("grid-template-columns", @"20% 80%")
                    .AddStyle("grid-template-rows", @"min-content 1fr")
                    .AddStyle("grid-template-areas", @"""Navigation Controls"" ""Navigation Content""");
            default:
                throw new ArgumentOutOfRangeException(nameof(breakpoint), breakpoint, null);
        }
    }

    private void BreakpointChanged(Breakpoint obj)
    {
        _containerStyle = GetContainerStyle(obj).Build();
    }

    private WikiCategory GetRootCategory()
    {
        var rootCategory = new WikiCategory(string.Empty, new(), new());
        foreach (var pageHeader in _wikiPageHeaders)
        {
            var path = pageHeader.Name?.Split('/') ?? Array.Empty<string>();
            var currentCategory = rootCategory;
            for (var i = 0; i < path.Length - 1; i++)
            {
                var subCategory = currentCategory.SubCategories.FirstOrDefault(c => c.Name == path[i]);
                if (subCategory is null)
                {
                    subCategory = new WikiCategory(path[i], new(), new());
                    currentCategory.SubCategories.Add(subCategory);
                }
                currentCategory = subCategory;
            }
            currentCategory.Pages.Add(pageHeader);
        }
        return rootCategory;
    }

    private async Task AddWikiPageAsync()
    {
        await CreateWikiRevisionDialog.ShowAsync(DialogService, WikiRepository)
            .ConfigureAwait(false);
        var wikiPageHeaders = await WikiRepository.GetWikiPageHeadersAsync()
            .ConfigureAwait(false);
        _wikiPageHeaders.Clear();
        _wikiPageHeaders.AddRange(wikiPageHeaders);
    }

    private async Task ModifyWikiPageAsync()
    {
        if (_page is null)
            throw new ArgumentNullException(nameof(_page));
        if (_page.PrimaryKey is null)
            throw new NullReferenceException();
        await CreateWikiRevisionDialog.ShowAsync(DialogService, WikiRepository, _page, _selectedRevisions.First())
            .ConfigureAwait(false);
        _page = await WikiRepository.GetWikiPageAsync(_page.PrimaryKey.Value, MeService.HasBaseClaimOrWikiAdmin(Claims.Wiki.All))
            .ConfigureAwait(false);
        _selectedRevisions = _page.Revisions?.MaxBy((q) => q.TimeStampCreated)?.MakeEnumerable()
                             ?? Enumerable.Empty<WikiPageRevision>();
    }

    private async Task DeleteWikiPageAsync()
    {
        if (_page is null)
            throw new ArgumentNullException(nameof(_page));
        if (_page.PrimaryKey is null)
            throw new NullReferenceException();
        var confirm = await ConfirmDeletionDialog.ShowAsync(DialogService, Localizer[nameof(Language.Pages_Wiki_ConfirmDeletePage_Description)], Localizer[nameof(Language.Pages_Wiki_ConfirmDeletePage_Title)])
            .ConfigureAwait(false);
        if (!confirm)
            return;
        await WikiRepository.DeleteWikiPageAsync(_page.PrimaryKey.Value)
            .ConfigureAwait(false);
        _wikiPageHeaders.RemoveAll((q) => q.PrimaryKey == _page.PrimaryKey.Value);
        _page = null;
        _selectedRevisions = Enumerable.Empty<WikiPageRevision>();
    }

    public async ValueTask DisposeAsync()
    {
        if (_breakpointSubscription is not null)
            await BreakpointService.UnsubscribeAsync(_breakpointSubscription.SubscriptionId);
    }

}