@using System.ComponentModel.DataAnnotations
@using X39.Util.Collections
@inject BaseUrl BaseUrl

@if (IsComposition)
{
    <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color"
                   Href="@BaseUrl.ResolveApiUrl($"/mod-packs/{ModPackKey}/download/latest")"
                   target="_blank"/>
}
else if ((TimeStampDownloaded ?? DateTimeOffset.MinValue) < RevisionCreated)
{
    <MudBadge Color="Color" Dot="true" Overlap="true">
        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color"
                       Href="@BaseUrl.ResolveApiUrl($"/mod-packs/{ModPackKey}/download/{RevisionKey}")"
                       target="_blank"
                       OnClick="@(() => TimeStampDownloadedChanged.InvokeAsync(DateTimeOffset.MaxValue))"/>
    </MudBadge>
}
else
{
    <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color"
                   Href="@BaseUrl.ResolveApiUrl($"/mod-packs/{ModPackKey}/download/{RevisionKey}")"
                   target="_blank"/>
}


@code {
    [Parameter, Required, EditorRequired]
    public bool IsComposition { get; set; }

    [Parameter, Required, EditorRequired]
    public DateTimeOffset? TimeStampDownloaded { get; set; }

    [Parameter, Required, EditorRequired]
    public EventCallback<DateTimeOffset> TimeStampDownloadedChanged { get; set; }

    [Parameter, Required, EditorRequired]
    public long ModPackKey { get; set; }

    [Parameter, Required, EditorRequired]
    public long RevisionKey { get; set; }

    [Parameter, Required, EditorRequired]
    public DateTimeOffset RevisionCreated { get; set; }

    [Parameter]
    public Color Color { get; set; }
}
