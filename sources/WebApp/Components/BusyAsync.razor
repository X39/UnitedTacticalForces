@using X39.Util
@using System.ComponentModel.DataAnnotations

@ChildContent
@if (IsBusy)
{
    @BusyOverlay
}


@code {

    [Parameter, EditorRequired, Required]
    public RenderFragment ChildContent { get; set; } = @<div></div>;

    [Parameter]
    public RenderFragment BusyOverlay { get; set; } = @<div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255, 255, 255, 0.5); z-index: 1000;">
        <MudProgressCircular Color="Color.Primary"/>
    </div>;

    private int  _counter = 0;
    public  bool IsBusy => _counter > 0;

    /// <summary>
    /// Creates a busy token.
    /// The busy token is disposed when the busy flag should be removed.
    /// </summary>
    public IDisposable BusyToken()
    {
        Interlocked.Increment(ref _counter);
        return new Disposable(
            () =>
            {
                Interlocked.Decrement(ref _counter);
                InvokeAsync(StateHasChanged);
            }
        );
    }

    /// <summary>
    /// Starts a task and sets the busy flag.
    /// Removes the busy flag when the task is finished.
    /// </summary>
    /// <param name="task">The task to start.</param>
    public void Start(Func<Task> task)
    {
        var busyToken = BusyToken();
        try
        {
            // ReSharper disable once AccessToDisposedClosure
            task().ContinueWith(_ => busyToken.Dispose());
        }
        catch
        {
            busyToken.Dispose();
            throw;
        }
    }

}