@page "/"
@using X39.UnitedTacticalForces.WebApp.Services.EventRepository
@using System.Collections.Immutable
@inject IStringLocalizer<Language> Localizer
@inject IEventRepository EventRepository
@inject IDialogService DialogService

<PageTitle>@Localizer[nameof(Language.Pages_Events_Title)]</PageTitle>
@if (_events.Any())
{
    <MudContainer>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudTimeline TimelinePosition="TimelinePosition.Alternate">
                @foreach (var it in _events)
                {
                    <MudTimelineItem Color="@(it.AcceptedCount >= it.MinimumAccepted ? Color.Success : Color.Error)">
                        <ItemOpposite>
                            <MudText Color="@(it.AcceptedCount >= it.MinimumAccepted ? Color.Success : Color.Error)"
                                     Typo="Typo.h5">
                                @it.ScheduledFor?.ToString("g")
                            </MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <Events_EventCard EventItem="it" ParentStateHasChanged="StateHasChanged"/>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudStack Class="pt-4">
                @foreach (var it in _events)
                {
                    <Events_EventCard ParentStateHasChanged="StateHasChanged" EventItem="it"/>
                }
            </MudStack>
        </MudHidden>
    </MudContainer>
}
else
{
    <div style="position: fixed; left: 0; top: 50%; transform: translate(0, -50%); width: min(100vw, 100%); justify-content: center; display: flex;">
        <MudPaper Class="d-inline-block mud-theme-primary px-5 py- 3align-self-center">
            <MudText>@Localizer[nameof(Language.Pages_Events_NoUpcomingEvents)]</MudText>
        </MudPaper>
    </div>
}
<div style="position: fixed; right: 2rem; bottom: 2rem;">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@CreateNewEventAsync"/>
</div>

@code {

    [CascadingParameter]
    public Breakpoint Breakpoint { get; set; }

    private IReadOnlyCollection<Event> _events = ImmutableArray<Event>.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadEventsAsync()
            .ConfigureAwait(false);
    }

    private async Task ReloadEventsAsync()
    {
        var events = await EventRepository.GetUpcomingEventsAsync();
        _events = events;
    }


    private async Task CreateNewEventAsync()
    {
        var eventItem = await Dialogs.ModifyEventDialog.ShowAsync(DialogService)
            .ConfigureAwait(false);
        if (eventItem is null)
            return;
        await EventRepository.CreateEventAsync(eventItem)
            .ConfigureAwait(false);
        await InvokeAsync(StateHasChanged)
            .ConfigureAwait(false);
    }

}